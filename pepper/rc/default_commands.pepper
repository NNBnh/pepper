map normal ! :<space>-run-command<enter>
map normal | :<space>-replace-with-output<enter>

map normal <space>o :<space>-find-file<enter>
map normal <space>f :<space>-find-pattern<enter>

alias h help
alias q quit
alias qa quit-all
alias o open
alias s save
alias sa save-all
alias r reopen
alias ra reopen-all
alias c close
alias ca close-all

command -run-command @{
    readline "run-command:" @{
        run "@readline-input()"
    }
}
command -replace-with-output @{
    readline "replace-with-output:" @{
        replace-with-output "@readline-input()"
    }
}

eval on windows @{
    command -find-file @{
        picker-entries-from-lines "cmd /c dir /a-d /s /b"
        pick "open:" @{
            open "@picker-entry()"
        }
    }
    command -find-pattern @{
        readline "find:" @{
            open scratch "@readline-input().refs"
            enqueue-keys aad
            replace-with-output 'findstr /s /r /p /n "/c:@readline-input()" *'
        }
    }
}

eval on linux @{
    copy-command "xclip -selection clipboard -in"
    paste-command "xclip -selection clipboard -out"

    command -find-file @{
        picker-entries-from-lines "find . -type f -printf '%P\\n'"
        pick "open:" @{
            open "@picker-entry()"
        }
    }
}

eval on bsd @{
    copy-command "xclip -in"
    paste-command "xclip -out"

    command -find-file @{
        picker-entries-from-lines "find . -type f -printf '%P\\n'"
        pick "open:" @{
            open "@picker-entry()"
        }
    }
}

eval on macos @{
    copy-command "pbcopy"
    paste-command "pbpaste"

    command -find-file @{
        picker-entries-from-lines "find . -type f -print"
        pick "open:" @{
            open "@picker-entry()"
        }
    }
}

eval on linux bsd macos @{
    command -find-pattern @{
        readline "find:" @{
            open scratch "@readline-input().refs"
            enqueue-keys aad
            replace-with-output 'grep --recursive --binary-files=without-match --with-filename --line-number "@readline-input()"'
        }
    }
}

